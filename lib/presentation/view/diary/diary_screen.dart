import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:sonoflow/models/input_type.dart';
import 'package:sonoflow/presentation/utils/colors.dart';
import 'package:sonoflow/presentation/view/components/slider_widget.dart';
import 'package:sonoflow/presentation/view/diary/components/diary_card_widget.dart';
import 'package:sonoflow/presentation/viewmodel/change_layer_viewmodel.dart';
import 'package:sonoflow/presentation/viewmodel/diarycard_viewmodel.dart';

/// DIARY SCREEN
///
/// A tela principal do di√°rio do sono, que permite ao usu√°rio preencher
/// seu di√°rio para ajudar a melhorar a qualidade do sono.
/// - Exibe uma AppBar personalizada com o t√≠tulo baseado no estado atual.
/// - Dependendo do estado, exibe diferentes camadas (layers) da interface,
///   come√ßando com uma mensagem de boas-vindas e um bot√£o para iniciar o question√°rio.
/// - O SliderWidget √© exibido na segunda camada (quando o question√°rio √© iniciado).
class DiaryScreen extends StatefulWidget {
  const DiaryScreen({super.key});

  @override
  State<DiaryScreen> createState() => _DiaryScreenState();
}

class _DiaryScreenState extends State<DiaryScreen> {
  String _sleepDate = DateTime.now().toString().split(" ")[0];
  final ValueNotifier<String> _bedtime = ValueNotifier('00:00');
  final ValueNotifier<String> _sleepAttemptTime = ValueNotifier('00:00');
  final ValueNotifier<String> _wakeUpTime = ValueNotifier('00:00');
  final ValueNotifier<String> _lastWakeUpTime = ValueNotifier('00:00');

  final String _timeToFallAsleep = 'Menos de 5 minutos';
  final String _timeToFallAsleepAgain = 'Menos de 5 minutos';

  int _nightAwakenings = 0;

  final List<String> _techniquesUsedToday = [];
  final List<String> _positiveFactorsToday = [];
  final List<String> _negativeFactorsToday = [];
  final List<String> _sleepFactors = [];

  double _anxietyComparisonToday = 50;
  double _fatigueReduction = 50;
  final double _stressComparisonToday = 50;
  double _morningFeeling = 50;

  bool _medicationUsageYesterday = false;
  final TextEditingController _additionalComments = TextEditingController();
  double _sleepFlowDedication = 50;

  @override
  Widget build(BuildContext context) {
    // Obt√©m o ViewModel que gerencia as camadas da interface
    ChangeLayerViewmodel layerViewModel = Provider.of<ChangeLayerViewmodel>(context);

    // Obt√©m o ViewModel que gerencia os cart√µes do di√°rio
    DiaryCardViewModel cardViewModel = Provider.of<DiaryCardViewModel>(context);

    final List<Map<String, dynamic>> cards = [
      // LAYER 1
      // Data do Sono
      {
        'layer': 1,
        'title': 'Data do Sono',
        'value': _sleepDate,
        'type': InputType.date,
        'onPressed': () {
          _selectSleepDate(context);
        }
      },
      // A que horas voc√™ foi para cama?
      {
        'layer': 1,
        'title': 'A que horas voc√™ foi para cama?',
        'value': _bedtime.value,
        'type': InputType.time,
        'onPressed': () {
          _selectTime(context, _bedtime);
        }
      },
      // Depois de ir para a cama, qual foi o hor√°rio que voc√™ decidiu tentar dormir?
      {
        'layer': 1,
        'title': 'Depois de ir para a cama, qual foi o hor√°rio que voc√™ decidiu tentar dormir?',
        'value': _sleepAttemptTime.value,
        'type': InputType.time,
        'onPressed': () {
          _selectTime(context, _sleepAttemptTime);
        },
      },

      // LAYER 2
      // Quanto tempo voc√™ acha que demorou at√© pegar no sono?
      {
        'layer': 2,
        'title': 'Quanto tempo voc√™ acha que demorou at√© pegar no sono?',
        'value': _timeToFallAsleep,
        'type': InputType.select,
        'options': const [
          'Menos de 5 minutos',
          'Menos de 10 minutos',
          'Menos de 15 minutos',
          'Menos de 20 minutos',
          'Mais de 20 minutos',
          'Mais de 30 minutos',
          'Mais de 40 minutos',
          'Mais de 50 minutos',
          'Mais de 60 minutos',
        ],
      },
      // Quantas vezes voc√™ acordou durante a noite?
      {
        'layer': 2,
        'title': 'Quantas vezes voc√™ acordou durante a noite?',
        'value': _nightAwakenings.toString(),
        'type': InputType.count,
        'onPressed': () {
          setState(() {
            if (_nightAwakenings > 0) {
              _nightAwakenings--;
            }
          });
        },
        'onPressed2': () {
          setState(() {
            _nightAwakenings++;
          });
        },
      },
      // Quanto tempo voc√™ acha que demorou at√© pegar no sono novamente?
      {
        'layer': 2,
        'title': 'Quanto tempo voc√™ acha que demorou at√© pegar no sono novamente?',
        'value': _timeToFallAsleepAgain,
        'type': InputType.select,
        'options': const [
          'Menos de 5 minutos',
          'Menos de 10 minutos',
          'Menos de 15 minutos',
          'Menos de 20 minutos',
          'Mais de 20 minutos',
          'Mais de 30 minutos',
          'Mais de 40 minutos',
          'Mais de 50 minutos',
          'Mais de 60 minutos',
        ],
      },

      // LAYER 3
      // A que horas voc√™ acordou pela √∫ltima vez?
      {
        'layer': 3,
        'title': 'A que horas voc√™ acordou pela √∫ltima vez?',
        'value': _lastWakeUpTime.value,
        'type': InputType.date,
        'onPressed': () {
          _selectTime(context, _lastWakeUpTime);
        }
      },
      // A que horas voc√™ levantou da cama
      {
        'layer': 3,
        'title': 'A que horas voc√™ levantou da cama',
        'value': _wakeUpTime.value,
        'type': InputType.date,
        'onPressed': () {
          _selectTime(context, _wakeUpTime);
        }
      },

      // LAYER 4
      // Comparado ao dia de ontem, como est√° sua ansiedade hoje?
      {
        'layer': 4,
        'title': 'Comparado ao dia de ontem, como est√° sua ansiedade hoje?',
        'doubleValue': _anxietyComparisonToday,
        'type': InputType.slider,
        'sliderIcon_1': "üßò‚Äç- ansioso",
        'sliderIcon_2': "üòØ + ansioso",
        'doubleonChange': (newValue) {
          setState(() {
            _anxietyComparisonToday = newValue;
          });
        },
      },
      // O quanto o seu cansa√ßo diminuiu de ontem para hoje
      {
        'layer': 4,
        'title': 'O quanto o seu cansa√ßo diminuiu de ontem para hoje',
        'doubleValue': _fatigueReduction,
        'type': InputType.slider,
        'sliderIcon_1': 'üòé - cansa√ßo',
        'sliderIcon_2': 'ü•µ + cansa√ßo',
        'doubleonChange': (newValue) {
          setState(() {
            _fatigueReduction = newValue;
          });
        },
      },

      // LAYER 5
      // Em rela√ß√£o a ontem como voc√™ se sente em rela√ß√£o ao estresse
      {
        'layer': 5,
        'title': 'Em rela√ß√£o a ontem como voc√™ se sente em rela√ß√£o ao estresse',
        'doubleValue': _stressComparisonToday,
        'type': InputType.slider,
        'sliderIcon_1': 'üòä - estresse',
        'sliderIcon_2': 'üò° + estresse',
        'doubleonChange': (newValue) {
          setState(() {
            _fatigueReduction = newValue;
          });
        },
      },
      // Como voc√™ se sente ao acordar hoje?
      {
        'layer': 5,
        'title': 'Como voc√™ se sente ao acordar hoje?',
        'doubleValue': _morningFeeling,
        'type': InputType.slider,
        'sliderIcon_1': 'ü•± - energia',
        'sliderIcon_2': 'üîã + eneriga',
        'doubleonChange': (newValue) {
          setState(() {
            _morningFeeling = newValue;
          });
        },
      },

      // LAYER 6
      // Selecione os fatores que estiveram presentes durante o seu dia e antes de voc√™ ir dormir
      {
        'layer': 6,
        'title': 'Selecione os fatores que estiveram presentes durante o seu dia e antes de voc√™ ir dormir',
        'valueList': _techniquesUsedToday,
        'type': InputType.choiceChip,
        'options': const [
          'T√©cnica Emi-sleep-1',
          'T√©cnica Emi-sleep-2',
          'T√©cnica Emi-sleep-3',
          'T√©cnica Emi-ton',
          'T√©cnica Emi-ansi-1',
          'T√©cnica Emi-ansi-2',
        ],
        'onChange': (item) {
          setState(() {
            cardViewModel.toggleFactors(_techniquesUsedToday, item);
          });
        },
      },

      // LAYER 7
      // Selecione os fatores presentes durante o per√≠odo de sono
      {
        'layer': 7,
        'title': 'Selecione os fatores presentes durante o per√≠odo de sono',
        'valueList': _positiveFactorsToday,
        'type': InputType.choiceChip,
        'options': const [
          'T√©cnica Emi-sleep-1',
          'T√©cnica Emi-sleep-2',
          'T√©cnica Emi-sleep-3',
          'T√©cnica Emi-ton',
          'T√©cnica Emi-ansi-1',
          'T√©cnica Emi-ansi-2',
        ],
        'onChange': (item) {
          setState(() {
            cardViewModel.toggleFactors(_positiveFactorsToday, item);
          });
        },
      },

      // LAYER 8
      // Selecione os fatores que estiveram presentes antes de dormir:
      {
        'layer': 8,
        'title': 'Selecione os fatores que estiveram presentes antes de dormir:',
        'valueList': _negativeFactorsToday,
        'type': InputType.choiceChip,
        'options': const [
          'T√©cnica Emi-sleep-1',
          'T√©cnica Emi-sleep-2',
          'T√©cnica Emi-sleep-3',
          'T√©cnica Emi-ton',
          'T√©cnica Emi-ansi-1',
          'T√©cnica Emi-ansi-2',
        ],
        'onChange': (item) {
          setState(() {
            cardViewModel.toggleFactors(_negativeFactorsToday, item);
          });
        },
      },

      // LAYER 9
      // Fatores durante o sono
      {
        'layer': 9,
        'title': 'Fatores durante o sono',
        'valueList': _sleepFactors,
        'options': const [
          'T√©cnica Emi-sleep-1',
          'T√©cnica Emi-sleep-2',
          'T√©cnica Emi-sleep-3',
          'T√©cnica Emi-ton',
          'T√©cnica Emi-ansi-1',
          'T√©cnica Emi-ansi-2',
        ],
        'type': InputType.choiceChip,
        'onChange': (item) {
          setState(() {
            cardViewModel.toggleFactors(_sleepFactors, item);
          });
        },
      },

      // LAYER 10
      // Voc√™ fez uso de algum medicamento para dormir/ansiedade?
      {
        'layer': 10,
        'title': 'Voc√™ fez uso de algum medicamento para dormir/ansiedade?',
        'boolValue': _medicationUsageYesterday,
        'type': InputType.bool,
        'onPressed': () {
          setState(() {
            _medicationUsageYesterday = true;
          });
        },
        'onPressed2': () {
          setState(() {
            _medicationUsageYesterday = false;
          });
        }
      },

      // Algum coment√°rio a mais?
      {
        'layer': 10,
        'title': 'Algum coment√°rio a mais?',
        'stringValueController': _additionalComments,
        'type': InputType.text,
        'onPressed': () {}
      },

      // LAYER 11
      // O quanto voc√™ se dedicou ao programa Sonoflow hoje
      {
        'layer': 11,
        'title': 'O quanto voc√™ se dedicou ao programa Sonoflow hoje',
        'doubleValue': _sleepFlowDedication,
        'type': InputType.slider,
        'sliderIcon_1': 'üòä - estresse',
        'sliderIcon_2': 'üò° + estresse',
        'doubleonChange': (newValue) {
          setState(() {
            _sleepFlowDedication = newValue;
          });
        },
      },
    ];

    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          // Fundo de tela com uma imagem e cor de fundo
          color: Color.fromRGBO(12, 31, 61, 1),
          image: DecorationImage(
            image: AssetImage('assets/auth_background.png'),
            fit: BoxFit.cover,
          ),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            _buildAppBar(context, layerViewModel),
            if (layerViewModel.layer == 0) ...[
              const SizedBox(height: 20),
              _buildWelcomeLayer(context, layerViewModel)
            ] else
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      Expanded(
                          child: SingleChildScrollView(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            ...cards.where((card) => card['layer'] == layerViewModel.layer).map((card) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 32.0),
                                child: DiaryCardWidget(
                                  title: card['title'] ?? '',
                                  value: card['value'] ?? '',
                                  type: card['type'],
                                  boolValue: card['boolValue'] ?? false,
                                  stringValueController: card['stringValueController'],

                                  // Propriedades relacionadas ao valor
                                  doubleValue: card['doubleValue'] as double?,
                                  doubleonChange: card['doubleonChange'] as Function(double)?,

                                  // Propriedades relacionadas √† sele√ß√£o
                                  options: List<String>.from(card['options'] ?? []),
                                  valueList: card['valueList'] ?? [],

                                  // Propriedades de intera√ß√£o
                                  onPressed: card['onPressed'] as Function()?,
                                  onPressed2: card['onPressed2'] as Function()?,
                                  onChange: card['onChange'] as Function(String)?,

                                  // √çcones do slider
                                  sliderIcon_1: card['sliderIcon_1'],
                                  sliderIcon_2: card['sliderIcon_2'],
                                ),
                              );
                            }),
                          ],
                        ),
                      )),
                      const SliderWidget(),
                    ],
                  ),
                ),
              )
          ],
        ),
      ),
    );
  }

  /// APP BAR
  ///
  /// Constr√≥i a AppBar personalizada para a tela do di√°rio.
  /// - Exibe um bot√£o de voltar, que retorna √† camada anterior ou sai da tela.
  /// - Exibe o t√≠tulo da camada atual baseado no `layerViewModel`.
  Widget _buildAppBar(BuildContext context, ChangeLayerViewmodel layerViewModel) {
    return Padding(
      padding: const EdgeInsets.only(top: 55),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          children: [
            // Bot√£o de voltar (altera a camada ou fecha a tela)
            GestureDetector(
              onTap: () {
                setState(() {
                  if (layerViewModel.layer > layerViewModel.minLayer) {
                    layerViewModel.previousLayer();
                  } else {
                    Navigator.pop(context);
                  }
                });
              },
              child: const Image(
                image: AssetImage("assets/icons/arrow_left.png"),
              ),
            ),
            const SizedBox(width: 20),
            // Exibe o t√≠tulo da camada atual
            Text(
              layerViewModel.layerTitle,
              style: const TextStyle(color: Colors.white, fontSize: 25),
            ),
          ],
        ),
      ),
    );
  }

  /// WELCOME LAYER
  ///
  /// Constr√≥i a camada de boas-vindas (primeira camada) do di√°rio.
  /// - Exibe uma mensagem encorajando o usu√°rio a iniciar o di√°rio do sono.
  /// - Exibe um bot√£o que, ao ser pressionado, avan√ßa para a pr√≥xima camada.
  Widget _buildWelcomeLayer(BuildContext context, ChangeLayerViewmodel layerViewModel) {
    return Expanded(
      child: Container(
        decoration: const BoxDecoration(
          // Bordas arredondadas no topo
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(32),
            topRight: Radius.circular(32),
          ),
          color: AppColors.ghostWhite,
        ),
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(32),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // CARD
                // Exibe uma mensagem e uma imagem no centro da tela
                Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.05),
                        offset: const Offset(0, 4),
                        blurRadius: 8,
                        spreadRadius: 1,
                      ),
                    ],
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(40),
                    child: Column(
                      children: [
                        const Text(
                          "Realize o seu di√°rio do sono para que possamos te ajudar a melhorar sua qualidade do sono",
                          style: TextStyle(
                            color: AppColors.midnightBlue,
                            fontWeight: FontWeight.bold,
                            fontSize: 20,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        // Imagem central no card
                        Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(16),
                            gradient: AppColors.linearBlueGradient,
                          ),
                          padding: const EdgeInsets.all(16),
                          child: const Image(
                            image: AssetImage("assets/public/img_sleep_diary_man_2_vector.png"),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 50),

                // BUTTON
                // Bot√£o para iniciar o question√°rio
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          setState(() {
                            layerViewModel.nextLayer();
                          });
                        },
                        style: ButtonStyle(
                          backgroundColor: WidgetStateProperty.all(AppColors.goldenYellow),
                          minimumSize: WidgetStateProperty.all(const Size(0, 80)),
                        ),
                        child: const Text(
                          "Iniciar question√°rio",
                          style: TextStyle(
                            color: AppColors.midnightBlue,
                            fontSize: 22,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectSleepDate(BuildContext context) async {
    DateTime? selectedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2010),
      lastDate: DateTime(3000),
    );
    if (selectedDate != null) {
      setState(() {
        String newValue = selectedDate.toString().split(" ")[0];
        _sleepDate = newValue;
      });
    }
  }

  void _selectTime(BuildContext context, ValueNotifier<String> time) async {
    TimeOfDay? selectedTime = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );

    if (selectedTime != null) {
      setState(() {
        String newTime = selectedTime.format(context);
        time.value = newTime;
      });
    }
  }
}
